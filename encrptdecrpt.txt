public static string EncodeString(string inputString)
{
    inputString = inputString.ToLower();

    string[] words = inputString.Split();

    List<string> encodedChars = new List<string>();

    for (int wordIndex = 0; wordIndex < words.Length; wordIndex++)
    {
        string word = words[wordIndex];
        
        for (int charIndex = 0; charIndex < word.Length; charIndex++)
        {
            char currentChar = word[charIndex];
            
            // Find the index of currentChar in the original inputString
            int position = inputString.IndexOf(currentChar) + 1;
            
            // Generate the code (wordIndex + 1)(charIndex + 1)
            string code = (wordIndex + 1).ToString() + (charIndex + 1).ToString();
            encodedChars.Add(code);
        }
    }

    string encodedString = string.Join(",", encodedChars);
    encodedString = encodedString.Replace(" ", "-"); // Replace spaces with hyphens
    return encodedString;
}





public class MainInput
{
    public static void Main(string[] args)
    {
        try
        {
            Console.WriteLine("Enter a sentence to encode:");
            string userInput = Console.ReadLine();

            if (string.IsNullOrEmpty(userInput))
            {
                throw new ArgumentException("The input string is empty or null.", nameof(userInput));
            }

            string encodedOutput = Program.EncodeString(userInput);
            Console.WriteLine("Encoded String:");
            Console.WriteLine(encodedOutput);
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }
}










using System;
using System.Collections.Generic;

public class Program
{
    public static string EncodeString(string inputString)
    {
        
        inputString = inputString.ToLower();

        string[] words = inputString.Split();

        List<string> encodedChars = new List<string>();

        for (int wordIndex = 0; wordIndex < words.Length; wordIndex++)
        {
            string word = words[wordIndex];
            
            for (int charIndex = 0; charIndex < word.Length; charIndex++)
            {
                char currentChar = word[charIndex];
                
                int position = inputString.IndexOf(currentChar) + 1;
                
                string code = (wordIndex + 1).ToString()+(charIndex + 1).ToString();
                encodedChars.Add(code);
            }
        }
    
        string encodedString = string.Join(",", encodedChars);

        return encodedString;
    }
}
















using System;
using System.Collections.Generic;

namespace LogicalPrograms
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = "this is a a program program";
            
            // Check for empty or null string
            if (string.IsNullOrEmpty(name))
            {
                Console.WriteLine("Input string is empty or null.");
                Console.ReadLine();
                return;
            }

            string[] arr = name.Split(' ');

            // Lists to store unique and duplicate words
            var uniqueList = new List<string>();
            var duplicateList = new List<string>();

            // Dictionary to count occurrences of each word
            var wordCount = new Dictionary<string, int>();

            // Count occurrences of each word
            foreach (string word in arr)
            {
                if (wordCount.ContainsKey(word))
                {
                    wordCount[word]++;
                }
                else
                {
                    wordCount[word] = 1;
                }
            }

            // Separate words into unique and duplicate lists
            foreach (var kvp in wordCount)
            {
                if (kvp.Value == 1)
                {
                    uniqueList.Add(kvp.Key);
                }
                else
                {
                    duplicateList.Add(kvp.Key);
                }
            }

            // Print unique words
            Console.WriteLine("Unique words:");
            foreach (string word in uniqueList)
            {
                Console.WriteLine(word);
            }

            // Print duplicate words
            Console.WriteLine("\nDuplicate words:");
            foreach (string word in duplicateList)
            {
                Console.WriteLine(word);
            }

            Console.ReadLine();
        }
    }
}











using System;

public class MainInput
{
    public static void Main(string[] args)
    {
        try
        {
            Console.WriteLine("Enter a sentence to encode:");
            string userInput = Console.ReadLine();

            if (userInput == String.Empty)
            {
                throw new ArgumentException("The string is empty.", nameof(userInput));
            }
            else if (userInput == null)
            {
                throw new NullReferenceException("userInput is null.");
            }
            else
            {
                string encodedOutput = Program.EncodeString(userInput);
                Console.WriteLine("Encoded String:");
                Console.WriteLine(encodedOutput);
            }
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        catch (NullReferenceException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }
}









using System;

public class MainInput
{
    public static void Main(string[] args)
    {
        Console.WriteLine("Enter a sentence to encodeer:");
        string userInput = Console.ReadLine();
        if(userInput==String.Empty){
            throw new ArgumentException("the string is empty");
        }
        else if(userInput==null){
            throw new NullReferenceException("userInput is null.");
        }
        else{
        string encodedOutput = Program.EncodeString(userInput);

        Console.Write("Encoded String:");
        Console.WriteLine(encodedOutput);
        }
    }
}










using System;
using System.Collections.Generic;

public class Program
{
    public static string EncodeString(string inputString)
    {
        // Convert input string to lowercase to make case-insensitive
        inputString = inputString.ToLower();

        // Split the input into words based on space
        string[] words = inputString.Split();

        List<string> encodedChars = new List<string>();

        // Iterate through each word and encode the characters
        for (int wordIndex = 0; wordIndex < words.Length; wordIndex++)
        {
            string word = words[wordIndex];
            
            for (int charIndex = 0; charIndex < word.Length; charIndex++)
            {
                char currentChar = word[charIndex];
                
                // Find the position of the current character in the inputString
                int position = inputString.IndexOf(currentChar) + 1;
                
                // Generate the code by combining wordIndex and charIndex
                string code = $"{wordIndex + 1}{charIndex + 1}";
                encodedChars.Add(code);
            }
        }

        // Join the encoded characters with comma
        string encodedString = string.Join(",", encodedChars);

        return encodedString;
    }
}




using System;

public class MainInput
{
    public static void Main(string[] args)
    {
        // Prompt the user to enter a string
        Console.WriteLine("Enter a string to encode:");
        string userInput = Console.ReadLine();

        // Call the EncodeString method from Program class
        string encodedOutput = Program.EncodeString(userInput);

        // Output the encoded string
        Console.WriteLine("Encoded String:");
        Console.WriteLine(encodedOutput);
    }
}
















using System;
using System.Collections.Generic;

namespace LogicalPrograms
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = "this is a a program program";
            string[] arr = name.Split(' ');

            // Lists to store unique and duplicate words
            var uniqueList = new List<string>();
            var duplicateList = new List<string>();

            // Dictionary to count occurrences of each word
            var wordCount = new Dictionary<string, int>();

            // Count occurrences of each word
            foreach (string word in arr)
            {
                if (wordCount.ContainsKey(word))
                {
                    wordCount[word]++;
                }
                else
                {
                    wordCount[word] = 1;
                }
            }

            // Separate words into unique and duplicate lists
            foreach (var kvp in wordCount)
            {
                if (kvp.Value == 1)
                {
                    uniqueList.Add(kvp.Key);
                }
                else
                {
                    duplicateList.Add(kvp.Key);
                }
            }

            // Print unique words
            Console.WriteLine("Unique words:");
            foreach (string word in uniqueList)
            {
                Console.WriteLine(word);
            }

            // Print duplicate words
            Console.WriteLine("\nDuplicate words:");
            foreach (string word in duplicateList)
            {
                Console.WriteLine(word);
            }

            Console.ReadLine();
        }
    }
}











using System;
using System.Collections.Generic;
using System.Linq;

namespace LogicalPrograms
{
    class Program
    {
        static void Main(string[] args)
        {
            string name = "this is a a program program";
            string[] arr = name.Split(' ');

            var myList = new List<string>();
            var duplicates = new List<string>();

            foreach(string res in arr)
            {
                if (!myList.Contains(res))
                {
                    char dupli = myList.Add(res);
                    System.Console.WriteLine("the duplicates are",dupli);
                }
                else
                {
                    char uniques = duplicates.Add(res);
                    System.Console.WriteLine("the duplicates are",uniques);
                }
            }

            foreach(string result in duplicates)
            {
                Console.WriteLine(result);
            }

            Console.ReadLine();
}
    }
}


























using System;
using System.Collections.Generic;
using System.Text;

public class Program
{
    public static string EncodeString(string inputString)
    {
        // Convert input string to lowercase to make case-insensitive
        inputString = inputString.ToLower();

        // Split the input into words based on space
        string[] words = inputString.Split();

        List<string> encodedChars = new List<string>();

        // Iterate through each word and encode the characters
        for (int wordIndex = 0; wordIndex < words.Length; wordIndex++)
        {
            string word = words[wordIndex];
            
            for (int charIndex = 0; charIndex < word.Length; charIndex++)
            {
                char currentChar = word[charIndex];
                
                // Find the position of the current character in the inputString
                int position = inputString.IndexOf(currentChar) + 1;
                
                // Generate the code by combining wordIndex and charIndex
                string code = $"{wordIndex + 1}{charIndex + 1}";
                encodedChars.Add(code);
            }
        }

        // Join the encoded characters with comma and replace space with hyphen
        string encodedString = string.Join(",", encodedChars);
        encodedString = encodedString.Replace(" ", "-");

        return encodedString;
    }

    public static void Main(string[] args)
    {
        string inputText = "The quick and brown fox jumps over the Lazy Dog";
        string encodedOutput = EncodeString(inputText);
        Console.WriteLine(encodedOutput);
    }
}











using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    // Define custom exception for empty string arguments.
    public class EmptyStringArgument : Exception
    {
        public EmptyStringArgument(string message) : base(message) { }
    }

    // Method to separate unique and duplicate words.
    public static void SeparateWords(string input, out List<string> uniqueWords, out List<string> duplicateWords)
    {
        if (input == null)
        {
            throw new NullReferenceException("The input string is null.");
        }

        if (string.IsNullOrWhiteSpace(input))
        {
            throw new EmptyStringArgument("The input string is empty.");
        }

        // Normalize input and split into words.
        var words = input.ToLower().Split(new char[] { ' ', ',', '.', '!', '?', ';' }, StringSplitOptions.RemoveEmptyEntries);

        // Dictionaries to track word counts.
        var wordCount = new Dictionary<string, int>();

        // Populate the dictionary with word counts.
        foreach (var word in words)
        {
            if (wordCount.ContainsKey(word))
            {
                wordCount[word]++;
            }
            else
            {
                wordCount[word] = 1;
            }
        }

        // Separate unique and duplicate words.
        uniqueWords = wordCount.Where(pair => pair.Value == 1).Select(pair => pair.Key).ToList();
        duplicateWords = wordCount.Where(pair => pair.Value > 1).Select(pair => pair.Key).ToList();
    }

    static void Main()
    {
        try
        {
            // Test cases to demonstrate functionality.
            string[] testCases = 
            {
                "Do not call me, let me call you",
                "I had coffee at a coffee shop yesterday during coffee break",
                "",
                null
            };

            foreach (var testCase in testCases)
            {
                Console.WriteLine($"Processing: \"{testCase}\"");

                // Call the SeparateWords method and handle exceptions.
                try
                {
                    SeparateWords(testCase, out List<string> uniqueWords, out List<string> duplicateWords);

                    // Display results.
                    Console.WriteLine($"Unique: {string.Join(", ", uniqueWords)}");
                    Console.WriteLine($"Duplicate: {string.Join(", ", duplicateWords)}");
                }
                catch (EmptyStringArgument ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                }
                catch (NullReferenceException ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                }
                catch (Exception ex)
                {
                    // Catch any other unforeseen exceptions.
                    Console.WriteLine($"Unexpected error: {ex.Message}");
                }

                Console.WriteLine(); // For better readability between test cases.
            }
        }
        catch (Exception ex)
        {
            // Catch any exceptions that may arise in the main method itself.
            Console.WriteLine($"An error occurred in the main program: {ex.Message}");
        }
    }
}











using System;
using System.Collections.Generic;

class StringEncoder
{
    public static void Main()
    {
        Console.WriteLine("Enter a sentence to encode:");
        string input = Console.ReadLine();

        // Call the method to encode the string.
        string encodedString = EncodeString(input);
        Console.WriteLine($"Encoded String: {encodedString}");
    }

    public static string EncodeString(string input)
    {
        // Normalize the input to lower case.
        input = input.ToLower();

        // Split the sentence into words.
        string[] words = input.Split(' ');

        // Dictionary to store the code for each letter.
        Dictionary<char, string> letterCodes = new Dictionary<char, string>();

        // Iterate through each word and each letter to find the code.
        for (int wordIndex = 0; wordIndex < words.Length; wordIndex++)
        {
            string word = words[wordIndex];
            for (int letterIndex = 0; letterIndex < word.Length; letterIndex++)
            {
                char letter = word[letterIndex];

                // Check if the letter is an alphabet and if it's not already in the dictionary.
                if (char.IsLetter(letter) && !letterCodes.ContainsKey(letter))
                {
                    // Create the code for the letter.
                    string code = (wordIndex + 1).ToString() + (letterIndex + 1).ToString();
                    letterCodes[letter] = code;
                }
            }
        }

        // Construct the encoded string.
        List<string> encodedParts = new List<string>();
        foreach (char c in input)
        {
            if (char.IsLetter(c))
            {
                encodedParts.Add(letterCodes[c]);
            }
            else if (c == ' ')
            {
                encodedParts.Add("-");
            }
            else
            {
                encodedParts.Add(c.ToString());
            }
        }

        // Join all parts with a comma.
        return string.Join(",", encodedParts);
    }
}







using System;
using System.Collections.Generic;

namespace sampleapp
{
    class ListOperations
    {
        static void Main(string[] args)
        {
            // Initialize the list
            List<int> many = new List<int>();

            // Read the number of elements to add to the list
            Console.WriteLine("How many elements do you want to add?");
            int count = int.Parse(Console.ReadLine());

            // Loop to add elements to the list
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine("Enter element {0}:", i + 1);
                int manyy = int.Parse(Console.ReadLine());
                many.Add(manyy);
            }

            // Print all elements in the list
            Console.WriteLine("The elements in the list are:");
            foreach (int item in many)
            {
                Console.WriteLine(item);
            }
        }
    }
}












using System;

namespace Caesar_Cipher
{
    class Encryptor
    {
        public static char Cipher(char ch, int key)
        {
            if (!char.IsLetter(ch))
            {
                return ch;
            }

            char d = char.IsUpper(ch) ? 'A' : 'a';
            return (char)((((ch + key) - d) % 26) + d);
        }

        public static string Encipher(string input, int key)
        {
            string output = string.Empty;

            foreach (char ch in input)
                output += Cipher(ch, key);

            return output;
        }
    }

    class Decryptor
    {
        public static string Decipher(string input, int key)
        {
            // Using the same encipher method with a shifted key for decryption
            return Encryptor.Encipher(input, 26 - key);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Type a string to encrypt:");
            string userString = Console.ReadLine();

            Console.WriteLine("\n");

            Console.Write("Enter your Key: ");
            int key = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("\n");

            Console.WriteLine("Encrypted Data:");
            string cipherText = Encryptor.Encipher(userString, key);
            Console.WriteLine(cipherText);
            Console.Write("\n");

            Console.WriteLine("Decrypted Data:");
            string decryptedText = Decryptor.Decipher(cipherText, key);
            Console.WriteLine(decryptedText);
            Console.Write("\n");

            Console.ReadKey();
        }
    }
}




















using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Caesar_Cipher
{
    class Program
    {


        public static char cipher(char ch, int key)
        {
            if (!char.IsLetter(ch))
            {

                return ch;
            }

            char d = char.IsUpper(ch) ? 'A' : 'a';
            return (char)((((ch + key) - d) % 26) + d);


        }


        public static string Encipher(string input, int key)
        {
            string output = string.Empty;

            foreach (char ch in input)
                output += cipher(ch, key);

            return output;
        }

        public static string Decipher(string input, int key)
        {
            return Encipher(input, 26 - key);
        }


        static void Main(string[] args)
        {

            Console.WriteLine("Type a string to encrypt:");
            string UserString = Console.ReadLine();

            Console.WriteLine("\n");

            Console.Write("Enter your Key");
            int key = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("\n");


            Console.WriteLine("Encrypted Data");

            string cipherText = Encipher(UserString, key);
            Console.WriteLine(cipherText);
            Console.Write("\n");

            Console.WriteLine("Decrypted Data:");

            string t = Decipher(cipherText, key);
            Console.WriteLine(t);
            Console.Write("\n");




            Console.ReadKey();

        }
    }
}





















using System;

namespace CaesarCipherExample
{
    public class CaesarCipher
    {
        // Method to encrypt a message using Caesar Cipher
        public string Encrypt(string input, int shift)
        {
            char[] buffer = input.ToCharArray();

            for (int i = 0; i < buffer.Length; i++)
            {
                char letter = buffer[i];

                if (char.IsLetter(letter))
                {
                    char offset = char.IsUpper(letter) ? 'A' : 'a';
                    letter = (char)((((letter + shift) - offset) % 26) + offset);
                }
                buffer[i] = letter;
            }

            return new string(buffer);
        }

        // Method to decrypt a message using Caesar Cipher
        public string Decrypt(string input, int shift)
        {
            return Encrypt(input, 26 - (shift % 26));
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            CaesarCipher cipher = new CaesarCipher();

            Console.WriteLine("Enter the message to encrypt:");
            string plaintext = Console.ReadLine();

            Console.WriteLine("Enter the shift value:");
            int shift;
            while (!int.TryParse(Console.ReadLine(), out shift))
            {
                Console.WriteLine("Invalid input. Please enter a valid integer for the shift value:");
            }

            string encryptedMessage = cipher.Encrypt(plaintext, shift);
            Console.WriteLine($"Encrypted Message: {encryptedMessage}");

            string decryptedMessage = cipher.Decrypt(encryptedMessage, shift);
            Console.WriteLine($"Decrypted Message: {decryptedMessage}");

            // Keep the console open
            Console.ReadLine();
        }
    }
}








------------------------------------------------------------------------------------------------------------------------------------------------

using System;

namespace CaesarCipher
{
    class Program
    {
        // Function to encrypt or decrypt a single character
        public static char Cipher(char ch, int key)
        {
            // If the character is not a letter, return it as is
            if (!char.IsLetter(ch))
            {
                return ch;
            }

            // Determine whether the character is uppercase or lowercase
            char offset = char.IsUpper(ch) ? 'A' : 'a';

            // Apply the shift and wrap around the alphabet
            return (char)(((ch + key - offset) % 26) + offset);
        }

        // Function to encrypt a string using the given key
        public static string Encipher(string input, int key)
        {
            string output = string.Empty;

            foreach (char ch in input)
            {
                output += Cipher(ch, key);
            }

            return output;
        }

        // Function to decrypt a string using the given key
        public static string Decipher(string input, int key)
        {
            // Decryption is the same as encryption with the key's inverse
            return Encipher(input, 26 - key);
        }

        static void Main(string[] args)
        {
            bool repeat;
            do
            {
                Console.Clear();
                Console.WriteLine("========================================");
                Console.WriteLine("\t\tCaesar Cipher");
                Console.WriteLine("========================================");

                // Get the text to be encrypted or decrypted
                Console.Write("Enter Text: ");
                string text = Console.ReadLine();

                // Get the key for the cipher
                Console.Write("Enter Key (shift amount): ");
                int key = Convert.ToInt32(Console.ReadLine());

                // Choose whether to encrypt or decrypt
                Console.WriteLine("1. Encrypt");
                Console.WriteLine("2. Decrypt");
                Console.Write("Your Choice: ");
                int choice = Convert.ToInt32(Console.ReadLine());

                if (choice == 1)
                {
                    string encryptedText = Encipher(text, key);
                    Console.WriteLine("Encrypted Data: " + encryptedText);
                }
                else if (choice == 2)
                {
                    string decryptedText = Decipher(text, key);
                    Console.WriteLine("Decrypted Data: " + decryptedText);
                }
                else
                {
                    Console.WriteLine("Invalid Choice!");
                }

                // Ask the user if they want to process another text
                Console.Write("Do you want to try again? (Y/N): ");
                char repeatChoice = Console.ReadKey().KeyChar;
                repeat = repeatChoice == 'Y' || repeatChoice == 'y';

            } while (repeat);

            Console.WriteLine("\nGoodbye!");
        }
    }
}












