***********************Asp.net WebForms********************************

-creating the project
select Asp.NEt WebApplication
then select webform and untick all the rest
-As we create the web form there are two types 
1.simple web form()

1.1this is a simple webform which contains a .aspx file and a .aspx.cs file
2.in the .aspx file we write html code with <asp> abbrevation ex<asp:label runnat =server>
sunnat server is impoetant to define as it will run our application with the help of server some comman tahgs are
-<asp:ListBox runat="server" **if we want to get data enable check box for postback by clicking on the list box it will help to display values
--<asp:TextBox runat="server"
--<asp:Label runat="server"
--<asp:MenuItem runat="server"
3. in the bottom we will have two buttoon one for design and other for source we can drag drop the styles if we want to add the styles 
then click on the button/any thing on desing then go to properties then we can add the styles in it
4.the source code will be auto generated as we go on adding styles and also we can add a full log in page by going to
-----tTOOL BOX  it will have all the credentoials we just need to drag drop
5. the aspx.cs file will contain all the bacend part we need to add the all the data with the help of the id of that particular design
it should be autogenerated the class name if we hardcode it then we will gwt errors
to get this just double click on the object


2.Master Page
-- it will have an <asp:contentplaceholder=""> here it will contain a id if we forget to choose a webform with master page while creating
then we have to just remve all the content of that html page and then add mainmasterpage in the first line and below add this master page
id  the child pages should not contain any head or body as master page will have all the data
add this is child page <asp:contentplaceholder=""> and at the end of page close this tag it means it is a part of master page

3.Web form with master page
--if we chosse this then there is no need to add the extra it will automatically create the boiler plate for us
just we need to write aour html ans aspx.cs code and add this particular files refrence in main master file then run it


***************************Asp.Net MVC************************************
M = model
it will contain all the get set methods which are requiresd for our application while creating we just need to add an .cs extenction class and write the code 

c=controller
the file name should containe the word controller then only it will exccute

it will have all the controller which are need to be excecuted to run the file 
to run it we just need to add a particula view for it then selecy the model or empty or edit or delete then the classs name and the db
the main diffrence between mvc and mvc framework is that we write all the crud operations in the controller only in the mvc
 public IActionResult Edit(int? id) 
 {
     var record = _MovieDbContext.Movies.FirstOrDefault(m=>m.MovieId==id);
     if (record == null) 
     {
        return NotFound();
     }
     return View(record);
 }

each crud will have two metods one with http post and one without it

[HttpPost]
public IActionResult Edit(Movie movie) 
{
    var id=movie.MovieId;
    var record = _MovieDbContext.Movies.FirstOrDefault(m => m.MovieId == id);
    if (record == null)
    {
        return NotFound();
    }
    record.MovieTitle = movie.MovieTitle;
    record.MovieActors = movie.MovieActors;
    record.MovieDirector= movie.MovieDirector;
    record.MovieReview= movie.MovieReview;
    _MovieDbContext.SaveChanges();
    return RedirectToAction("AllEmployees");
}
this is used becaues one is to find the data and another to change the data 

v=view
this will contain the html file in this all syntax are same as html only each method will have an view which are in controller
the view will contain the all the data
the important thing is data for the main index file write modal name as 
************************@MODEL LIST<sampleWebMvc.model.stock>***********\
it will create a list in which we can add the data

****************
the modal will have biler code or coloumns names
the controller will have all the view
the view contains the html code
********************

*****************************ASP.NEt MvC Framework*************************************************
-select the asp.net web application and then select mvc from the slction bar and untick http

then create a modal folder if there is not in which u dfine a class like employee or stock

then create a Services folder if not exists in Services write cs code  in which we write about the crud operations or main working
then in controller add the view for which we are eccuting

in controller it should contain a view of all the operation 
 ***public ActionResult AddStock()
 {
     return View(new Stock());
 }
 [HttpPost]
 public ActionResult AddStock(Stock postedData) 
 {
   stockService.AddStock(postedData);
     return RedirectToAction("Index");
 }**
then create a view of it the view will createted using double click on the class name then add view then write html code 
to run the file

goto the global.aspx 
then go to routingthere change the name from class name and foloowed by view

 //routes.MapRoute(
 //    name: "Display",
 //    url: "{controller}/{action}/{id}",
 //    defaults: new { controller = "StockManager(this is the name of the controller)", action = "Index(this is the class name)", id = UrlParameter.Optional }
 //);

to connect to the db create a data folder in it 
click add data->data entity model then next then select the prefered table this will create or connect to the table


**********************************************ASP.NET WEB API************************************************
1. choose web api from the core from the project selection page 
2. if the data base is not connected then 
  2.1 first install all the nuget pacakages (Entitiy framework core,sql server,tool,dependencyinkjection)
   2.2 add db context in the file where we have created the table or the coloumn naems written
    public class EmployeeDbContext : DbContext
    {
        public EmployeeDbContext(DbContextOptions<EmployeeDbContext>options) : base(options)
        {
            
        }

        public DbSet<Employee> Employees {  get; set; }
    }
  2.3 then add the data in program.cs file builder.Services.AddDbContext<EmployeeDbContext>(options =>
            {
                options.UseSqlServer(builder.Configuration.GetConnectionString("myConnection"));
            });
2.4 then in pacakage manager console add add-migration mig1 then updatae-database
the above process will connect the database then go to the controller or add one then write the prefered code by cretaing a constructor   private EmployeeDbContext _employeeDbContext;
        public CrudEmployeeController(EmployeeDbContext context) { _employeeDbContext = context; }

        [HttpGet("AllEmployees")]
        public async Task<IActionResult> GetAllEmployees()
        {
            var data = await _employeeDbContext.Employees.ToListAsync();
            return Ok(data);
        }
it will look something like this and will open the app directly in swagger using it we can use this api by adding thers connection string

